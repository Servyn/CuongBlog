{
    "version": "https://jsonfeed.org/version/1",
    "title": "CuongBlog",
    "description": "",
    "home_page_url": "https://servyn.github.io/CuongBlog",
    "feed_url": "https://servyn.github.io/CuongBlog/feed.json",
    "user_comment": "",
    "author": {
        "name": "Cuong"
    },
    "items": [
        {
            "id": "https://servyn.github.io/CuongBlog/blog/postlisting/",
            "url": "https://servyn.github.io/CuongBlog/blog/postlisting/",
            "title": "Các framework cho Javascript",
            "summary": "JavaScript Framework là gì? Chức năng của JavaScript Framework: Top 6 JavaScript Framework phổ biến: Các framework mới nổi: Kết luận: Nguồn: icts.io",
            "content_html": "<ul>\n<li>\n<p><strong>JavaScript Framework là gì?</strong></p>\n<ul>\n<li>JavaScript Framework là nền tảng đã được kiểm tra để xây dựng ứng dụng web mở rộng, chứa các thư viện mã code và bản mẫu cho các tính năng lập trình phổ biến. Framework giúp định hình giao diện và cấu trúc code của ứng dụng, giúp việc lập trình trở nên nhanh chóng và dễ dàng hơn.</li>\n</ul>\n</li>\n<li>\n<p><strong>Chức năng của JavaScript Framework:</strong></p>\n<ul>\n<li>Giúp lập trình viên xây dựng ứng dụng phức tạp nhanh chóng và hiệu quả.</li>\n<li>Cung cấp hệ sinh thái với các công cụ để kiểm tra, linting và tự động hóa quá trình cài đặt, cập nhật thư viện.</li>\n<li>Framework cho phép sử dụng lại các components, giải quyết các vấn đề frontend, và cải thiện tính duy trì của code.</li>\n</ul>\n</li>\n<li>\n<p><strong>Top 6 JavaScript Framework phổ biến:</strong></p>\n<ul>\n<li><strong>React</strong>: Được phát triển bởi Facebook, giúp xây dựng giao diện người dùng với Virtual DOM, JSX, và hỗ trợ tái sử dụng components<img loading=\"lazy\" src=\"https://icts-website-v2-prod.s3.ap-southeast-1.amazonaws.com/2_7f8e736152.png\" alt=\"undefined\" width=\"440\" height=\"330\" data-is-external-image=\"true\"></li>\n<li><strong>Vue.js</strong>: Tạo bởi Evan You, kết hợp các tính năng của Angular và React, hỗ trợ animations và templates dễ sử dụng.<img loading=\"lazy\" src=\"https://icts-website-v2-prod.s3.ap-southeast-1.amazonaws.com/3_a6839326fa.png\" alt=\"undefined\" width=\"440\" height=\"330\" data-is-external-image=\"true\"></li>\n<li><strong>Svelte</strong>: Không sử dụng DOM ảo, biên dịch code thành các module JavaScript nhỏ, giúp tối ưu hóa hiệu suất.<img loading=\"lazy\" src=\"https://icts-website-v2-prod.s3.ap-southeast-1.amazonaws.com/4_fa2235ec77.png\" alt=\"undefined\" width=\"440\" height=\"330\" data-is-external-image=\"true\"></li>\n<li><strong>Angular.js</strong>: Được phát triển bởi Google, cung cấp các công cụ và thư viện tích hợp, hỗ trợ liên kết dữ liệu hai chiều và dependency injection.<img loading=\"lazy\" src=\"https://icts-website-v2-prod.s3.ap-southeast-1.amazonaws.com/5_86400ec9c3.png\" alt=\"undefined\" width=\"440\" height=\"330\" data-is-external-image=\"true\"></li>\n<li><strong>Ember</strong>: Một MVC framework hỗ trợ phát triển ứng dụng web và mobile với Handlebars syntax và công cụ Ember Inspector.<img loading=\"lazy\" src=\"https://icts-website-v2-prod.s3.ap-southeast-1.amazonaws.com/6_52e0169280.png\" alt=\"undefined\" width=\"438\" height=\"328\" data-is-external-image=\"true\"></li>\n<li><strong>Backbone.js</strong>: Framework tối giản giúp phát triển ứng dụng client-side, hỗ trợ MVC và giảm thiểu code khi xử lý DOM.<img loading=\"lazy\" src=\"https://icts-website-v2-prod.s3.ap-southeast-1.amazonaws.com/7_6f493e654f.png\" alt=\"undefined\" width=\"437\" height=\"328\" data-is-external-image=\"true\"></li>\n</ul>\n</li>\n<li>\n<p><strong>Các framework mới nổi:</strong></p>\n<ul>\n<li><strong>Redwood.js</strong>: Full-stack framework hỗ trợ việc phát triển ứng dụng web theo cách chuẩn hóa, sử dụng serverless functions và GraphQL.</li>\n<li><strong>Remix</strong>: Framework tối ưu hóa cho server-side rendering (SSR), giúp giảm thiểu JavaScript và cải thiện tốc độ tải trang.<img loading=\"lazy\" src=\"https://icts-website-v2-prod.s3.ap-southeast-1.amazonaws.com/8_afa3d349fb.png\" alt=\"undefined\" width=\"443\" height=\"332\" data-is-external-image=\"true\"></li>\n</ul>\n</li>\n<li>\n<p><strong>Kết luận:</strong></p>\n<ul>\n<li>Việc chọn framework phụ thuộc vào nhu cầu và đặc thù dự án. Các framework giúp lập trình viên xây dựng ứng dụng nhanh chóng, tối ưu hóa code và cải thiện trải nghiệm người dùng.</li>\n</ul>\n</li>\n</ul>\n<p>Nguồn: <a href=\"https://icts.io\">icts.io</a></p>",
            "author": {
                "name": "Cuong"
            },
            "tags": [
                   "Tự học Javascript"
            ],
            "date_published": "2024-12-31T03:40:13+07:00",
            "date_modified": "2024-12-31T04:19:56+07:00"
        },
        {
            "id": "https://servyn.github.io/CuongBlog/blog/blogpostest/",
            "url": "https://servyn.github.io/CuongBlog/blog/blogpostest/",
            "title": "Lập trình hướng đối tượng với Javascript",
            "summary": "Lịch sử object Có một câu nói mang đầy tính triết học như này: Một vấn đề phức tạp có thể được quản lý bằng&hellip;",
            "content_html": "<h2 id=\"_lich-su-object-0\">Lịch sử object</h2>\n<p>Có một câu nói mang đầy tính triết học như này:</p>\n<blockquote>\n<p>Một vấn đề phức tạp có thể được quản lý bằng cách chia nó thành những phần nhỏ độc lập với nhau.</p>\n</blockquote>\n<p>Mỗi thành phần nhỏ ở đây chính là <a href=\"https://completejavascript.com/javascript-object-last-but-not-least/\" target=\"_blank\" rel=\"noopener\"><strong>object</strong></a>. Object cung cấp cho chúng ta những phương thức để gọi mà không cần biết nội dung bên trong nó như thế nào. Sau khi xây dựng được những object hoạt động theo đúng yêu cầu, ta sẽ sử dụng chúng để giải quyết những bài toán lớn hơn một cách đơn giản. Đây cũng chính là tư tưởng <strong>chia để trị</strong>.</p>\n<h2 id=\"_method-phuong-thuc-1\">Method (phương thức)</h2>\n<p>Method là một thành phần vô cùng quan trọng trong object. Đối với C++ hay Java, chúng ta chỉ có thể sử dụng được những method dạng public. Chúng ta sẽ sử dụng những method này để lấy giá trị hay thay đổi thông tin các thuộc tính của object. Trong JavaScript, method chính là một thuộc tính mà giá trị của nó là <a href=\"https://completejavascript.com/tim-hieu-function-javascript/\" target=\"_blank\" rel=\"noopener\">function</a>. Sau đây là một phương thức đơn giản:</p>\n<div style=\"box-sizing: border-box; color: #1b1b1b; font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: relative;\">\n<pre class=\"language-js\" data-filename=\"\"><code>var rabbit = {};\nrabbit.speak = function(line) {\n  console.log(\"The rabbit says '\" + line + \"'\");\n};\n\nrabbit.speak(\"I'm alive.\");\n// =&gt; The rabbit says 'I'm alive.'\n</code></pre>\n<button class=\"v-markdown-it-code-copy\" style=\"box-sizing: border-box; border-radius: 5px; margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; overflow: visible; text-transform: none; appearance: button; position: absolute; display: flex; align-items: center; justify-content: center; top: 7.5px; right: 6px; cursor: pointer; outline: none; border: none; background: #655454; height: 25px; opacity: 0.5;\" title=\"Sao chép\" data-clipboard-text=\"var rabbit = {};\nrabbit.speak = function(line) {\n  console.log(&quot;The rabbit says '&quot; + line + &quot;'&quot;);\n};\n\nrabbit.speak(&quot;I'm alive.&quot;);\n// =&gt; The rabbit says 'I'm alive.'\n\"></button></div>\n<p>Thông thường, một method sẽ làm một vài thứ với object gọi nó. Để biểu thị object đã gọi method, <a href=\"https://completejavascript.com/category/javascript-co-ban/\" target=\"_blank\" rel=\"noopener\">JavaScript</a> cung cấp từ khoá <strong>this</strong> để chúng ta sử dụng bên trong method. Ví dụ trên có thể thay đổi như sau:</p>\n<div style=\"box-sizing: border-box; color: #1b1b1b; font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: relative;\">\n<pre class=\"language-js\" data-filename=\"\"><code>function speak(line) {\n  console.log(\"The \" + this.type + \" rabbit says '\" + line + \"'\");\n}\nvar whiteRabbit = {type: \"white\", speak: speak};\nvar fatRabbit = {type: \"fat\", speak: speak};\n\nwhiteRabbit.speak(\"I'm alive.\");\n// =&gt; The white rabbit says 'I'm alive.'\nfatRabbit.speak(\"I'm alive.\");\n// =&gt; The fat rabbit says 'I'm alive.'\n</code></pre>\n<button class=\"v-markdown-it-code-copy\" style=\"box-sizing: border-box; border-radius: 5px; margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; overflow: visible; text-transform: none; appearance: button; position: absolute; display: flex; align-items: center; justify-content: center; top: 7.5px; right: 6px; cursor: pointer; outline: none; border: none; background: #655454; height: 25px; opacity: 0.5;\" title=\"Sao chép\" data-clipboard-text=\"function speak(line) {\n  console.log(&quot;The &quot; + this.type + &quot; rabbit says '&quot; + line + &quot;'&quot;);\n}\nvar whiteRabbit = {type: &quot;white&quot;, speak: speak};\nvar fatRabbit = {type: &quot;fat&quot;, speak: speak};\n\nwhiteRabbit.speak(&quot;I'm alive.&quot;);\n// =&gt; The white rabbit says 'I'm alive.'\nfatRabbit.speak(&quot;I'm alive.&quot;);\n// =&gt; The fat rabbit says 'I'm alive.'\n\"></button></div>\n<p>Tư tưởng sử dụng từ khoá <strong>this</strong> này cũng được áp dụng trong C++ hay Java.</p>\n<h3 id=\"_su-tuong-quan-voi-bind-call-apply-2\">Sự tương quan với bind, call, apply</h3>\n<p>Nếu bạn chưa biết <strong>bind</strong>, <strong>call</strong> hay <strong>apply</strong> là gì thì bạn có thể tham khảo tại <a href=\"https://completejavascript.com/phan-biet-call-apply-va-bind-trong-javascript/\" target=\"_blank\" rel=\"noopener\">đây</a>. Khi gọi 3 hàm này, tham số đầu tiên chính là giá trị của con trỏ <strong>this</strong>.</p>\n<div style=\"box-sizing: border-box; color: #1b1b1b; font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: relative;\">\n<pre class=\"language-js\" data-filename=\"\"><code>function speak(line) {\n  console.log(\"The \" + this.type + \" rabbit says '\" + line + \"'\");\n}\nvar whiteRabbit = {type: \"white\"};\nvar fatRabbit = {type: \"fat\"};\nvar sexyRabbit = {type: \"sexy\"};\n\nspeak.apply(whiteRabbit, [\"I'm alive.\"]);\n// =&gt; The white rabbit says 'I'm alive.'\n\nspeak.call(fatRabbit, \"I'm alive.\");\n// =&gt; The fat rabbit says 'I'm alive.'\n\nvar sexyRabbitSpeak = speak.bind(sexyRabbit, \"I'm alive.\");\nsexyRabbitSpeak();\n// =&gt; The sexy rabbit says 'I'm alive.'\n</code></pre>\n<button class=\"v-markdown-it-code-copy\" style=\"box-sizing: border-box; border-radius: 5px; margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; overflow: visible; text-transform: none; appearance: button; position: absolute; display: flex; align-items: center; justify-content: center; top: 7.5px; right: 6px; cursor: pointer; outline: none; border: none; background: #655454; height: 25px; opacity: 0.5;\" title=\"Sao chép\" data-clipboard-text=\"function speak(line) {\n  console.log(&quot;The &quot; + this.type + &quot; rabbit says '&quot; + line + &quot;'&quot;);\n}\nvar whiteRabbit = {type: &quot;white&quot;};\nvar fatRabbit = {type: &quot;fat&quot;};\nvar sexyRabbit = {type: &quot;sexy&quot;};\n\nspeak.apply(whiteRabbit, [&quot;I'm alive.&quot;]);\n// =&gt; The white rabbit says 'I'm alive.'\n\nspeak.call(fatRabbit, &quot;I'm alive.&quot;);\n// =&gt; The fat rabbit says 'I'm alive.'\n\nvar sexyRabbitSpeak = speak.bind(sexyRabbit, &quot;I'm alive.&quot;);\nsexyRabbitSpeak();\n// =&gt; The sexy rabbit says 'I'm alive.'\n\"></button>\n<div class=\"v-content-flex-center\"> </div>\n</div>\n<h2 id=\"_prototypes-3\">Prototypes</h2>\n<p><strong>Prototype</strong> là khái niệm rất riêng của JavaScript. Không giống như C++, Java, một JavaScript Object luôn có sẵn ít nhất một thuộc tính bên trong nó, là prototype. Và prototype cũng chính là một object. Khi một object gọi đến một thuộc tính mà nó không có thì nó sẽ tìm trong prototype. Hãy xem ví dụ sau:</p>\n<div style=\"box-sizing: border-box; color: #1b1b1b; font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: relative;\">\n<pre class=\"language-js\" data-filename=\"\"><code>var empty = {};\nconsole.log(empty.toString);\n// =&gt; function toString() { [native code] }\nconsole.log(empty.toString());\n// =&gt; [object Object]\n</code></pre>\n<button class=\"v-markdown-it-code-copy\" style=\"box-sizing: border-box; border-radius: 5px; margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; overflow: visible; text-transform: none; appearance: button; position: absolute; display: flex; align-items: center; justify-content: center; top: 7.5px; right: 6px; cursor: pointer; outline: none; border: none; background: #655454; height: 25px; opacity: 0.5;\" title=\"Sao chép\" data-clipboard-text=\"var empty = {};\nconsole.log(empty.toString);\n// =&gt; function toString() { [native code] }\nconsole.log(empty.toString());\n// =&gt; [object Object]\n\"></button></div>\n<p>Rõ ràng, tôi chỉ khai báo <strong>empty</strong> là một object mà không định nghĩa thêm thuộc tính nào. Tuy nhiên, ví dụ trên chỉ ra rằng thuộc tính <strong>toString</strong> tồn tại trong object <strong>empty</strong>. Đó là vì: <strong>toString</strong> là một thuộc tính của <strong>prototype</strong> mà một <strong>object</strong> thì luôn chứa thuộc tính <strong>prototype</strong>.</p>\n<div style=\"box-sizing: border-box; color: #1b1b1b; font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: relative;\">\n<pre class=\"language-js\" data-filename=\"\"><code>var empty = {};\n\nconsole.log(Object.getPrototypeOf(empty) == Object.prototype);\n// =&gt; true\nconsole.log(Object.getPrototypeOf(Object.prototype));\n// =&gt; null\n</code></pre>\n<button class=\"v-markdown-it-code-copy\" style=\"box-sizing: border-box; border-radius: 5px; margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; overflow: visible; text-transform: none; appearance: button; position: absolute; display: flex; align-items: center; justify-content: center; top: 7.5px; right: 6px; cursor: pointer; outline: none; border: none; background: #655454; height: 25px; opacity: 0.5;\" title=\"Sao chép\" data-clipboard-text=\"var empty = {};\n\nconsole.log(Object.getPrototypeOf(empty) == Object.prototype);\n// =&gt; true\nconsole.log(Object.getPrototypeOf(Object.prototype));\n// =&gt; null\n\"></button></div>\n<h2 id=\"_constructors-ham-khoi-tao-4\">Constructors (Hàm khởi tạo)</h2>\n<p>Nếu bạn đã biết về lập trình hướng đối tượng thì bạn sẽ không còn xa lạ gì với <strong>constructor</strong>. Trong JavaScript, hàm khởi tạo constructor sẽ chứa từ khoá <strong>this</strong> để biểu thị object được tạo ra từ nó. Thông thường, constructor sẽ được bắt đầu bằng chữ cái viết hoa - dùng để phân biệt nó với các function khác. Bạn sẽ phải sử dụng từ khoá <strong>new</strong> đứng trước tên function để tạo ra một đối tượng mới từ hàm constructor này. Sau đây là một ví dụ đơn giản về constructor:</p>\n<div style=\"box-sizing: border-box; color: #1b1b1b; font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: relative;\">\n<pre class=\"language-js\" data-filename=\"\"><code>function Rabbit(type) {\n  this.type = type;\n  this.greeting = function(){\n    console.log(this.type + \" rabbit\" + \" say Hello!\");\n  }\n}\n\nvar blackRabbit = new Rabbit(\"black\");\nconsole.log(blackRabbit.type);        \n// =&gt; black\nblackRabbit.greeting();  \n// =&gt; black rabbit say Hello!\n\nvar killerRabbit = new Rabbit(\"killer\");\nconsole.log(killerRabbit.type);\n// =&gt; killer\nkillerRabbit.greeting(); \n// =&gt; killer rabbit say Hello!\n</code></pre>\n<button class=\"v-markdown-it-code-copy\" style=\"box-sizing: border-box; border-radius: 5px; margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; overflow: visible; text-transform: none; appearance: button; position: absolute; display: flex; align-items: center; justify-content: center; top: 7.5px; right: 6px; cursor: pointer; outline: none; border: none; background: #655454; height: 25px; opacity: 0.5;\" title=\"Sao chép\" data-clipboard-text=\"function Rabbit(type) {\n  this.type = type;\n  this.greeting = function(){\n    console.log(this.type + &quot; rabbit&quot; + &quot; say Hello!&quot;);\n  }\n}\n\nvar blackRabbit = new Rabbit(&quot;black&quot;);\nconsole.log(blackRabbit.type);        \n// =&gt; black\nblackRabbit.greeting();  \n// =&gt; black rabbit say Hello!\n\nvar killerRabbit = new Rabbit(&quot;killer&quot;);\nconsole.log(killerRabbit.type);\n// =&gt; killer\nkillerRabbit.greeting(); \n// =&gt; killer rabbit say Hello!\n\"></button>\n<div class=\"v-content-flex-center\"> </div>\n</div>\n<p>Lúc này, mỗi đối tượng được tạo ra từ constructor <strong>Rabbit</strong> sẽ có hai thuộc tính <strong>type</strong> và <strong>greeting</strong>. Tuy nhiên, bạn vẫn có thể tạo thêm thuộc tính cho nó thông qua <strong>Object.prototype</strong> như sau:</p>\n<div style=\"box-sizing: border-box; color: #1b1b1b; font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: relative;\">\n<pre class=\"language-js\" data-filename=\"\"><code>function Rabbit(type) {\n  this.type = type;\n  this.greeting = function(){\n    console.log(this.type + \" rabbit\" + \" say Hello!\");\n  }\n}\n\nRabbit.prototype.sayBye = function (){\n  console.log(this.type + \" rabbit\" + \" say GoodBye!\");\n}\n\nvar blackRabbit = new Rabbit(\"black\");\nblackRabbit.sayBye();\n// =&gt; black rabbit say GoodBye!\n</code></pre>\n<button class=\"v-markdown-it-code-copy\" style=\"box-sizing: border-box; border-radius: 5px; margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; overflow: visible; text-transform: none; appearance: button; position: absolute; display: flex; align-items: center; justify-content: center; top: 7.5px; right: 6px; cursor: pointer; outline: none; border: none; background: #655454; height: 25px; opacity: 0.5;\" title=\"Sao chép\" data-clipboard-text=\"function Rabbit(type) {\n  this.type = type;\n  this.greeting = function(){\n    console.log(this.type + &quot; rabbit&quot; + &quot; say Hello!&quot;);\n  }\n}\n\nRabbit.prototype.sayBye = function (){\n  console.log(this.type + &quot; rabbit&quot; + &quot; say GoodBye!&quot;);\n}\n\nvar blackRabbit = new Rabbit(&quot;black&quot;);\nblackRabbit.sayBye();\n// =&gt; black rabbit say GoodBye!\n\"></button>\n<div class=\"v-content-flex-center\"> </div>\n</div>\n<h2 id=\"_ghi-de-thuoc-tinh-5\">Ghi đè thuộc tính</h2>\n<p>Trong ví dụ trên, <strong>Rabbit</strong> chứa thuộc tính <strong>type</strong>. Đối với mỗi object được tạo ra từ constructor Rabbit, bạn có thể thay đổi giá trị thuộc tính của một object mà không làm ảnh hưởng tới các object khác.</p>\n<div style=\"box-sizing: border-box; color: #1b1b1b; font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: relative;\">\n<pre class=\"language-js\" data-filename=\"\"><code>function Rabbit(type) {\n  this.type = type;\n  this.greeting = function(){\n  \tconsole.log(this.type + \" rabbit\" + \" say Hello!\");\n  }\n}\n\nRabbit.prototype.teeth = \"small\";\n\nvar blackRabbit = new Rabbit(\"black\");\nvar killerRabbit = new Rabbit(\"killer\");\n\nconsole.log(blackRabbit.teeth);   // =&gt; small\nconsole.log(killerRabbit.teeth);  // =&gt; small\n\nkillerRabbit.teeth = \"long\";\nconsole.log(blackRabbit.teeth);   // =&gt; small\nconsole.log(killerRabbit.teeth);  // =&gt; long\n</code></pre>\n<button class=\"v-markdown-it-code-copy\" style=\"box-sizing: border-box; border-radius: 5px; margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; overflow: visible; text-transform: none; appearance: button; position: absolute; display: flex; align-items: center; justify-content: center; top: 7.5px; right: 6px; cursor: pointer; outline: none; border: none; background: #655454; height: 25px; opacity: 0.5;\" title=\"Sao chép\" data-clipboard-text=\"function Rabbit(type) {\n  this.type = type;\n  this.greeting = function(){\n  \tconsole.log(this.type + &quot; rabbit&quot; + &quot; say Hello!&quot;);\n  }\n}\n\nRabbit.prototype.teeth = &quot;small&quot;;\n\nvar blackRabbit = new Rabbit(&quot;black&quot;);\nvar killerRabbit = new Rabbit(&quot;killer&quot;);\n\nconsole.log(blackRabbit.teeth);   // =&gt; small\nconsole.log(killerRabbit.teeth);  // =&gt; small\n\nkillerRabbit.teeth = &quot;long&quot;;\nconsole.log(blackRabbit.teeth);   // =&gt; small\nconsole.log(killerRabbit.teeth);  // =&gt; long\n\"></button>\n<div class=\"v-content-flex-center\"> </div>\n</div>\n<h2 id=\"_tinh-chat-dac-trung-cua-lap-trinh-huong-doi-tuong-trong-javascript-6\">Tính chất đặc trưng của lập trình hướng đối tượng trong JavaScript</h2>\n<h3 id=\"_tinh-dong-goi-encapsulation-7\">Tính đóng gói (Encapsulation)</h3>\n<p>Tính đóng gói: che giấu dữ liệu, không cho phép truy cập dữ liệu trực tiếp từ bên ngoài, mà phải thông qua các method được cung cấp.</p>\n<div style=\"box-sizing: border-box; color: #1b1b1b; font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: relative;\">\n<pre class=\"language-js\" data-filename=\"\"><code>function Person(_name){\n  var name = _name;\n  this.setName = function(_name){\n    name = _name;\t\t\n  }\n  this.getName = function(){\n    return name;\n  }\n}\n\nvar person = new Person(\"LamPham\");\nconsole.log(person.name);          // =&gt; undefined\nconsole.log(person.getName());     // =&gt; LamPham\n\nperson.setName(\"LP Devs\");\nconsole.log(person.getName());     // =&gt; LP Devs&lt;/pre&gt;\n</code></pre>\n<button class=\"v-markdown-it-code-copy\" style=\"box-sizing: border-box; border-radius: 5px; margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; overflow: visible; text-transform: none; appearance: button; position: absolute; display: flex; align-items: center; justify-content: center; top: 7.5px; right: 6px; cursor: pointer; outline: none; border: none; background: #655454; height: 25px; opacity: 0.5;\" title=\"Sao chép\" data-clipboard-text=\"function Person(_name){\n  var name = _name;\n  this.setName = function(_name){\n    name = _name;\t\t\n  }\n  this.getName = function(){\n    return name;\n  }\n}\n\nvar person = new Person(&quot;LamPham&quot;);\nconsole.log(person.name);          // =&gt; undefined\nconsole.log(person.getName());     // =&gt; LamPham\n\nperson.setName(&quot;LP Devs&quot;);\nconsole.log(person.getName());     // =&gt; LP Devs&lt;/pre&gt;\n\"></button>\n<div class=\"v-content-flex-center\"> </div>\n</div>\n<h3 id=\"_tinh-ke-thua-inheritance-8\">Tính kế thừa (inheritance)</h3>\n<p><a href=\"https://completejavascript.com/ke-thua-co-ban-trong-javascript\" target=\"_blank\" rel=\"noopener\">Tính kế thừa</a>: đối tượng con sẽ kế thừa những thuộc tính của đối tượng cha mà không cần phải định nghĩa lại. Mặc dù, JavaScript không hỗ trợ trực tiếp tính kế thừa, tuy nhiên ta vẫn có thể tuỳ biến để áp dụng tính chất này trong JavaScript.</p>\n<div style=\"box-sizing: border-box; color: #1b1b1b; font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: relative;\">\n<pre class=\"language-js\" data-filename=\"\"><code>function Person(_name){\n  var name = _name;\n  this.setName = function(_name){\n    name = _name;\t\t\n  }\n  this.getName = function(){\n    return name;\n  }\n}\n\nfunction Student(_name, _school){\n  var school = _school;\n  Person.call(this, _name);\n  this.setSchool = function(_school){\n    school = _school;\n  }\n  this.getSchool = function(){\n    return school;\n  }\n}\n\nvar student = new Student(\"LamPham\", \"HUST\");\nconsole.log(student.getName());    // =&gt; LamPham\nconsole.log(student.getSchool());  // =&gt; HUST\n\nstudent.setSchool(\"NEU\");\nstudent.setName(\"Ronaldo\");\n\nconsole.log(student.getName());    // =&gt; Ronaldo\nconsole.log(student.getSchool());  // =&gt; NEU\n</code></pre>\n<button class=\"v-markdown-it-code-copy\" style=\"box-sizing: border-box; border-radius: 5px; margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; overflow: visible; text-transform: none; appearance: button; position: absolute; display: flex; align-items: center; justify-content: center; top: 7.5px; right: 6px; cursor: pointer; outline: none; border: none; background: #655454; height: 25px; opacity: 0.5;\" title=\"Sao chép\" data-clipboard-text=\"function Person(_name){\n  var name = _name;\n  this.setName = function(_name){\n    name = _name;\t\t\n  }\n  this.getName = function(){\n    return name;\n  }\n}\n\nfunction Student(_name, _school){\n  var school = _school;\n  Person.call(this, _name);\n  this.setSchool = function(_school){\n    school = _school;\n  }\n  this.getSchool = function(){\n    return school;\n  }\n}\n\nvar student = new Student(&quot;LamPham&quot;, &quot;HUST&quot;);\nconsole.log(student.getName());    // =&gt; LamPham\nconsole.log(student.getSchool());  // =&gt; HUST\n\nstudent.setSchool(&quot;NEU&quot;);\nstudent.setName(&quot;Ronaldo&quot;);\n\nconsole.log(student.getName());    // =&gt; Ronaldo\nconsole.log(student.getSchool());  // =&gt; NEU\n\"></button>\n<div class=\"v-content-flex-center\"> </div>\n</div>\n<p>Ngoài ra, còn hai tính chất nữa là: tính <strong>đa hình</strong> và tính <strong>trừu tượng</strong>. Tuy nhiên, việc áp dụng hai tính chất này trong JavaScript là không rõ ràng. Do đó, tôi sẽ không trình bày về chúng nữa.</p>\n<h2 id=\"_ket-luan-9\">Kết luận</h2>\n<p>Trên đây là những khía cạnh cơ bản của lập trình hướng đối tượng được áp dụng trong JavaScript. Tôi có thể tóm tắt ngắn gọn lại như sau:</p>\n<ul>\n<li>Method: chúng ta sẽ sử dụng method để lấy giá trị và sửa đổi giá trị thuộc tính của object.</li>\n<li>Prototype: mọi object đều chứa thuộc tính prototype. Chúng ta có thể thay đổi, thêm thuộc tính của object dựa vào prototype.</li>\n<li>Constructor: Có thể tạo mới một object từ một hàm khởi tạo constructor sử dụng từ khoá <strong>new</strong>.</li>\n<li>Tính đóng gói: che giấu dữ liệu; không cho phép truy cập dữ liệu trực tiếp từ bên ngoài, mà phải thông qua các method được cung cấp.</li>\n<li>Tính kế thừa: đối tượng con sẽ kế thừa những thuộc tính của đối tượng cha mà không cần phải định nghĩa lại.</li>\n</ul>\n<p>Việc áp dụng lập trình hướng đối tượng vào JavaScript là tương đối khó. Tuy nhiên, nếu bạn nắm vững những kiến thức cơ bản mà tôi đã trình bày trên đây, thì tôi tin chắc rằng bạn sẽ dễ dàng tìm hiểu thêm và áp dụng lập trình hướng đối tượng trong JavaScript.</p>",
            "author": {
                "name": "Cuong"
            },
            "tags": [
                   "portfolio"
            ],
            "date_published": "2024-12-31T03:33:24+07:00",
            "date_modified": "2024-12-31T04:39:36+07:00"
        },
        {
            "id": "https://servyn.github.io/CuongBlog/blog/bai-1-ve-javascript/",
            "url": "https://servyn.github.io/CuongBlog/blog/bai-1-ve-javascript/",
            "title": "bài 1 về javascript",
            "author": {
                "name": "Cuong"
            },
            "tags": [
                   "Tự học Javascript"
            ],
            "date_published": "2024-12-30T17:38:12+07:00",
            "date_modified": "2024-12-31T03:42:32+07:00"
        }
    ]
}
